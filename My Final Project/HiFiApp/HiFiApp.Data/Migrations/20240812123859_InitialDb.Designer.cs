// <auto-generated />
using System;
using HiFiApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HiFiApp.Data.Migrations
{
    [DbContext(typeof(HiFiAppDbContext))]
    [Migration("20240812123859_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("HiFiApp.Entity.Concrete.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(3150),
                            IsActive = false,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(3163),
                            Name = "LG",
                            PhotoUrl = "LG-logo.jpg"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(3166),
                            IsActive = false,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(3167),
                            Name = "Samsung",
                            PhotoUrl = "Samsung-logo.jpg"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(3169),
                            IsActive = false,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(3170),
                            Name = "JBL",
                            PhotoUrl = "JBL-logo.jpg"
                        });
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("HiFiId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("HiFiId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(7535),
                            Description = "HiFi Home Teathre",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(7541),
                            Name = "Home Theathre"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(7544),
                            Description = "HiFi soundbar",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(7545),
                            Name = "Soundbars"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(7547),
                            Description = "HiFi Headphone",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 873, DateTimeKind.Local).AddTicks(7548),
                            Name = "Headphones"
                        });
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.HiFi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Properties")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("HiFis", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 875, DateTimeKind.Local).AddTicks(1201),
                            Description = "HiFi Home Teathre",
                            ImageUrl = "images/HiFis/lg.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 875, DateTimeKind.Local).AddTicks(1210),
                            Name = "LG HT-1000EV",
                            Price = 30000m,
                            Properties = "DTS, Dolby Atmos, Bluetooth",
                            Stock = 200
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 875, DateTimeKind.Local).AddTicks(1217),
                            Description = "HiFi Soundbar",
                            ImageUrl = "images/HiFis/samsung.jpg",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 875, DateTimeKind.Local).AddTicks(1218),
                            Name = "Samsung Q800C",
                            Price = 20000m,
                            Properties = "DTS, Dolby Atmos, Bluetooth",
                            Stock = 150
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            CreatedDate = new DateTime(2024, 8, 12, 15, 38, 58, 875, DateTimeKind.Local).AddTicks(1221),
                            Description = "HiFi Headphone",
                            ImageUrl = "images/HiFis/jbl.png",
                            IsActive = true,
                            IsHome = true,
                            ModifiedDate = new DateTime(2024, 8, 12, 15, 38, 58, 875, DateTimeKind.Local).AddTicks(1222),
                            Name = "JBL Quantum One",
                            Price = 10000m,
                            Properties = "DTS, Dolby Atmos",
                            Stock = 100
                        });
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.HiFiCategory", b =>
                {
                    b.Property<int>("HiFiId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("HiFiId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("HiFiCategories", (string)null);

                    b.HasData(
                        new
                        {
                            HiFiId = 1,
                            CategoryId = 3
                        },
                        new
                        {
                            HiFiId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            HiFiId = 2,
                            CategoryId = 3
                        },
                        new
                        {
                            HiFiId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            HiFiId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            HiFiId = 3,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HiFiId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HiFiId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("HiFiApp.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiFiApp.Entity.Concrete.HiFi", "HiFi")
                        .WithMany()
                        .HasForeignKey("HiFiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("HiFi");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.HiFi", b =>
                {
                    b.HasOne("HiFiApp.Entity.Concrete.Brand", "Brand")
                        .WithMany("HiFis")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.HiFiCategory", b =>
                {
                    b.HasOne("HiFiApp.Entity.Concrete.Category", "Category")
                        .WithMany("HiFiCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiFiApp.Entity.Concrete.HiFi", "HiFi")
                        .WithMany("HiFiCategories")
                        .HasForeignKey("HiFiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("HiFi");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("HiFiApp.Entity.Concrete.HiFi", "HiFi")
                        .WithMany()
                        .HasForeignKey("HiFiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HiFiApp.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HiFi");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.Brand", b =>
                {
                    b.Navigation("HiFis");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.Category", b =>
                {
                    b.Navigation("HiFiCategories");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.HiFi", b =>
                {
                    b.Navigation("HiFiCategories");
                });

            modelBuilder.Entity("HiFiApp.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
